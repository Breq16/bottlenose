<%
  @times = {}
  def processTimes(times, base_time, key)
    times.each do |t|
      timechunk = ((t - base_time) / 1.hour).floor
      @times[timechunk] ||= {time: t.at_beginning_of_hour.iso8601}
      @times[timechunk][key] = @times[timechunk][key].to_i + 1
    end
  end
  processTimes(allSubs.pluck(:created_at), assn.due_date, :all)
  processTimes(usedSubs.pluck(:created_at), assn.due_date, :used)
  (@times.keys.min..@times.keys.max).each do |chunk|
    @times[chunk] ||= {time: (assn.due_date - chunk.hours).at_beginning_of_hour.iso8601,
                       all: nil, used: nil}
  end
  @times = @times.to_a.sort_by(&:first).to_h
%>
var allTimes = <%= raw json_escape(JSON.generate(@times)) %>;
GoogleCharts.load('corechart', function() {
  var colors = ['steelblue', 'maroon', 'gold', 'seagreen', 'orange', 'indigo',
                'dodgerblue', 'firebrick', 'goldenrod', 'mediumseagreen', 'sandybrown', 'darkmagenta']
  var dataKeys = Object.keys(allTimes);
  dataKeys.sort((a, b) => Number.parseInt(a) - Number.parseInt(b));
  var minTime = Number.parseInt(dataKeys[0]);
  var maxTime = Number.parseInt(dataKeys[dataKeys.length - 1]);
  var data = [[{label: "Time", type: 'number'}, "All", "Used"]]
      .concat(dataKeys.map((t) => [{v: Number.parseInt(t), f: makeFriendlyDate(allTimes[t].time, true)},
                                   allTimes[t].all, allTimes[t].used]));
  data = GoogleCharts.api.visualization.arrayToDataTable(data);
  var timeTicks = [];
  var offset = (Math.ceil(minTime / 24) * 24) - minTime;
  for (var i = Math.ceil(minTime / 24) * 24; i <= Math.floor(maxTime / 24) * 24; i += 12)
    timeTicks.push({v: i, f: makeFriendlyDate(allTimes[i].time)});
  var options = {
    title: 'Submission time distribution',
    legend: { position: 'none' },
    colors: [colors[0], colors[10]],
    interpolateNulls: false,
    focusTarget: 'category',
    lineWidth: 3,
    hAxis: {
      title: 'Submission time',
      baseline: 0,
      showTextEvery: 2,
      ticks: timeTicks,
      maxTextLines: 2,
      viewWindow: {
        // min: -72,
        max: 24
      }
    },
  };
  var chart = new GoogleCharts.api.visualization.LineChart(document.getElementById('byTime'));
  chart.draw(data, options);
});
